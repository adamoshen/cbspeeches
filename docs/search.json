[{"path":"index.html","id":"analysis-of-central-bank-speeches","chapter":"Analysis of Central Bank Speeches","heading":"Analysis of Central Bank Speeches","text":"","code":""},{"path":"data-setup.html","id":"data-setup","chapter":"1 Data setup","heading":"1 Data setup","text":"","code":""},{"path":"data-setup.html","id":"initialisation","chapter":"1 Data setup","heading":"1.1 Initialisation","text":"","code":"\nlibrary(tidyverse)\nlibrary(pins)\nlibrary(pinsqs)\nlibrary(AzureStor)\n\nsource(here::here(\"R\", \"azure_init.R\"))\n\nspeeches_board <- storage_endpoint(\"https://cbspeeches1.dfs.core.windows.net/\", token=token) %>%\n  storage_container(name = \"cbspeeches\") %>%\n  board_azure(path = \"data-speeches\")"},{"path":"data-setup.html","id":"minor-adjustments-to-raw-data","chapter":"1 Data setup","heading":"1.2 Minor adjustments to raw data","text":"Read speeches Dropbox:Perform minor adjustments:Rename column processed_text simply text.Remove time component dates.Perform normalization text author names ASCII form.Remove excessive spaces text author fields.Fix select author names consistency.","code":"\nspeeches <- read_csv(\"~/boc_speeches/lda/iteration_04/speeches_processed.csv\")\nspeeches <- speeches %>%\n  rename(text = processed_text) %>%\n  mutate(\n    date = as_date(date),\n    text = stringi::stri_trans_general(text, \"Greek-Latin\"),\n    text = stringi::stri_trans_general(text, \"Latin-ASCII\"),\n    text = str_squish(text),\n    author = stringi::stri_trans_general(author, \"Greek-Latin\"),\n    author = stringi::stri_trans_general(author, \"Latin-ASCII\"),\n    author = str_squish(author)\n  ) %>%\n  mutate(\n    author = str_replace_all(author, \"Angelovska-Bezoska\", \"Angelovska-Bezhoska\"),\n    author = str_replace_all(author, \"Angelovska Bezhoska\", \"Angelovska-Bezhoska\"),\n    text = str_replace_all(text, \"Angelovska-Bezoska\", \"Angelovska-Bezhoska\"),\n    text = str_replace_all(text, \"Angelovska Bezhoska\", \"Angelovska-Bezhoska\")\n  )"},{"path":"data-setup.html","id":"save-the-data","chapter":"1 Data setup","heading":"1.3 Save the data","text":"Writing data pin board:","code":"\nspeeches_board %>%\n  pin_qsave(\n    speeches,\n    \"speeches-raw\",\n    title = \"speeches from dropbox with minor tweaks\"\n  )"},{"path":"extracting-the-country-from-the-text.html","id":"extracting-the-country-from-the-text","chapter":"2 Extracting the country from the text","heading":"2 Extracting the country from the text","text":"","code":""},{"path":"extracting-the-country-from-the-text.html","id":"initialisation-1","chapter":"2 Extracting the country from the text","heading":"2.1 Initialisation","text":"","code":"\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(pins)\nlibrary(pinsqs)\nlibrary(cld2)\nlibrary(AzureStor)\n\nsource(here::here(\"R\", \"azure_init.R\"))\n\nspeeches_board <- storage_endpoint(\"https://cbspeeches1.dfs.core.windows.net/\", token=token) %>%\n  storage_container(name = \"cbspeeches\") %>%\n  board_azure(path = \"data-speeches\")"},{"path":"extracting-the-country-from-the-text.html","id":"load-the-data","chapter":"2 Extracting the country from the text","heading":"2.2 Load the data","text":"","code":"\nspeeches <- speeches_board %>%\n  pin_qread(\"speeches-raw\")"},{"path":"extracting-the-country-from-the-text.html","id":"perform-language-detection","chapter":"2 Extracting the country from the text","heading":"2.3 Perform language detection","text":"Speeches dominant language English, removed. 18,827 speeches, 18,813\n(99.93%) English 14 (0.7%) English.","code":"\nspeeches <- speeches %>%\n  mutate(lang_cld2 = detect_language(text)) %>%\n  filter(lang_cld2 == \"en\") %>%\n  select(-lang_cld2)"},{"path":"extracting-the-country-from-the-text.html","id":"get-country","chapter":"2 Extracting the country from the text","heading":"2.4 Get country","text":"identification speech countries can briefly summarised follows:Extract institution name regex patterns.unable extract anything, extracted institution incorrect, affiliation \nauthor manually identified Google-ing.Normalise central bank names according format listed \nBIS website.Using list, identify country bank name.method chosen instead looking mentions country names first sentence \nspeech many instances meeting location different country \naffiliation author.","code":""},{"path":"extracting-the-country-from-the-text.html","id":"extraction-institution-by-regex-patterns","chapter":"2 Extracting the country from the text","heading":"2.4.1 Extraction institution by regex patterns","text":"institutions/organizations extracted looking general pattern :\n[position] (|) [institution name] within first sentence speech. attempt \nextraction institution/organization follows:","code":"\nextract_pattern1 <- \"(?<=(?:Board of Governors|Governing Board|Executive Board|Chief Executive Officer) of the )[^[:punct:]]+\"\nextract_pattern2 <- \"(?<=(?:Governor|President|Chairman|Director|Executive|Manager|Directorate) of the )[^[:punct:]]+\"\nextract_pattern3 <- \"(?<=Governor of )[^[:punct:]]+\" # for Philippines\nextract_pattern4 <- \"(?:Central|Reserve) Bank of (?:[:upper:][:lower:]+\\\\s?)+\"\nextract_pattern5 <- \"Bank of (?:[:upper:][:lower:]+\\\\s?)+\"\nextract_pattern6 <- \"(?i)National Bank of Serbia|Swiss National Bank|Hong Kong Monetary Authority|Monetary Authority of Singapore|Banco de Espana|Banco de Portugal|Banco de Mexico|South African Reserve Bank|Sveriges Riksbank|Oesterreichische Nationalbank\"\nextract_pattern7 <- \"Federal Reserve System\"\nextract_pattern8 <- \"(?i)Bank of [:alpha:]+\"\n\nspeeches <- speeches %>%\n  mutate(\n    # Remove periods after salutations, initials, and credentials\n    text = str_remove_all(text, \"(?<=Mr|Ms|Mrs|PhD|Dr|Dott|Prof|Jr|Sig|\\\\bp|\\\\bm|\\\\ba|\\\\bh|\\\\bc|\\\\bmult|vs|[A-Z0-9])\\\\.\"),\n    text = str_replace_all(text, \"Member Board of Governors\", \"Member of the Board of Governors\"),\n    text = str_replace_all(text, \"Govenor\", \"Governor\"),\n    # Extract first sentence before looking for patterns.\n    first_sentence = str_extract(text, \"^[^.]+\\\\.\"),\n    institution = str_extract(first_sentence, extract_pattern1),\n    institution = if_else(is.na(institution), str_extract(first_sentence, extract_pattern2), institution),\n    institution = if_else(is.na(institution), str_extract(first_sentence, extract_pattern3), institution),\n    institution = if_else(is.na(institution), str_extract(first_sentence, extract_pattern4), institution),\n    institution = if_else(institution == \"People\", \"The People's Bank of China\", institution),\n    institution = if_else(is.na(institution), str_extract(first_sentence, extract_pattern5), institution),\n    institution = if_else(is.na(institution), str_extract(first_sentence, extract_pattern6), institution),\n    institution = if_else(is.na(institution), str_extract(first_sentence, extract_pattern7), institution),\n    institution = if_else(is.na(institution), str_extract(first_sentence, extract_pattern8), institution)\n  )"},{"path":"extracting-the-country-from-the-text.html","id":"fill-missingincorrect-institutions","chapter":"2 Extracting the country from the text","heading":"2.4.2 Fill missing/incorrect institutions","text":"extraction fails incorrect (determined looking institution values NA\nvalues low frequencies), speechesâ€™ institutions/organizations \nmanually determined Google-ing author speech. information stored \ninst/data-misc/author_affiliations.xlsx. data updated according spreadsheet (\napplicable).Two speeches remain missing values author institution. missing values can \nfilled follows:","code":"\nauthor_affiliations <- read_xlsx(here::here(\"inst\", \"data-misc\", \"author_affiliations.xlsx\"))\n\nspeeches <- speeches %>%\n  rows_update(author_affiliations, by=\"author\")\nmissing_info <- tribble(\n  ~doc, ~author, ~institution,\n  \"r180725i\", \"Pablo Hernandez de Cos\", \"Bank of Spain\",\n  \"r180810b\", \"Jorgovanka Tabakovic\", \"National Bank of Serbia\"\n)\n\nspeeches <- speeches %>%\n  rows_update(missing_info, by=\"doc\")"},{"path":"extracting-the-country-from-the-text.html","id":"normalise-institution-names","chapter":"2 Extracting the country from the text","heading":"2.4.3 Normalise institution names","text":"list banks official names BIS website\ndownloaded stored inst/data-misc/bank_list.xlsx. extracted institution names \nprevious step normalised match names list. Additional organizations \nadded, BIS (Bank International Settlements) ECB (European Central Bank). US\nFederal Reserves associated common bank name Federal Reserve Bank.","code":"\nspeeches <- speeches %>%\n  mutate(\n    institution = str_squish(institution),\n    institution = case_when(\n      str_detect(institution, \"Federal Reserve|Atlanta|Chicago|Kansas City|New York|Saint Louis|San Francisco|America|BANK of NEW\") ~ \"Federal Reserve Bank\",\n      str_detect(institution, \"European Central Bank\") ~ \"European Central Bank\",\n      str_detect(institution, \"ECB\") ~ \"European Central Bank\",\n      str_detect(institution, \"Mauritius\") ~ \"Bank of Mauritius\",\n      str_detect(institution, \"Bundesbank\") ~ \"Deutsche Bundesbank\",\n      str_detect(institution, \"Italy|Italty\") ~ \"Bank of Italy\",\n      str_detect(institution, \"France\") ~ \"Bank of France\",\n      str_detect(institution, \"Japan\") ~ \"Bank of Japan\",\n      str_detect(institution, \"Korea\") ~ \"Bank of Korea\",\n      str_detect(institution, \"Bank of Papua New Guinea\") ~ \"Bank of Papua New Guinea\",\n      str_detect(institution, \"Bank of PNG\") ~ \"Bank of Papua New Guinea\",\n      str_detect(institution, \"(?i)Mexico\") ~ \"Bank of Mexico\",\n      str_detect(institution, \"China\") ~ \"The People's Bank of China\",\n      str_detect(institution, \"Ireland\") ~ \"Central Bank of Ireland\",\n      str_detect(institution, \"(?i)Portugal\") ~ \"Banco de Portugal\",\n      str_detect(institution, \"Bosnia|Herzegovina\") ~ \"Central Bank of Bosnia and Herzegovina\",\n      str_detect(institution, \"Romania\") ~ \"National Bank of Romania\",\n      str_detect(institution, \"Malaysia\") ~ \"Central Bank of Malaysia\",\n      str_detect(institution, \"Sierra Leone\") ~ \"Bank of Sierra Leone\",\n      str_detect(institution, \"Thailand\") ~ \"Bank of Thailand\",\n      str_detect(institution, \"(?i)Uganda\") ~ \"Bank of Uganda\",\n      str_detect(institution, \"Slovenia\") ~ \"Bank of Slovenia\",\n      str_detect(institution, \"Banka Slovenije\") ~ \"Bank of Slovenia\",\n      str_detect(institution, \"Bangko|Philippine|\\\\bBSP\\\\b\") ~ \"Central Bank of the Philippines (Bangko Sentral ng Pilipinas)\",\n      str_detect(institution, \"(?i)Riksbank\") ~ \"Sveriges Riksbank\",\n      str_detect(institution, \"Sweden|Swedish\") ~ \"Sveriges Riksbank\",\n      str_detect(institution, \"Riskbank|Risksbank\") ~ \"Sveriges Riksbank\",\n      str_detect(institution, \"Swiss\") ~ \"Swiss National Bank\",\n      str_detect(institution, \"Austria|Oesterreichische\") ~ \"Oesterreichische Nationalbank, the Austrian Central Bank\",\n      str_detect(institution, \"Norges|Norwegian\") ~ \"Central Bank of Norway\",\n      str_detect(institution, \"Denmark|Danmarks\") ~ \"Danmarks Nationalbank\",\n      str_detect(institution, \"Nederlandsche|Netherlands|Nederlandse\") ~ \"De Nederlandsche Bank\",\n      str_detect(institution, \"Macedonia\") ~ \"National Bank of the Republic of North Macedonia\",\n      str_detect(institution, \"Spain\") ~ \"Bank of Spain\",\n      str_detect(institution, \"Espana\") ~ \"Bank of Spain\",\n      str_detect(institution, \"(?i)Canada\") ~ \"Bank of Canada\",\n      str_detect(institution, \"(?i)Serbia\") ~ \"National Bank of Serbia\",\n      str_detect(institution, \"Hong Kong\") ~ \"Hong Kong Monetary Authority\",\n      str_detect(institution, \"India\") ~ \"Reserve Bank of India\",\n      str_detect(institution, \"Bangladesh\") ~ \"Bangladesh Bank\",\n      str_detect(institution, \"Indonesia\") ~ \"Bank Indonesia\",\n      str_detect(institution, \"Algeria\") ~ \"Bank of Algeria\",\n      str_detect(institution, \"Pakistan\") ~ \"State Bank of Pakistan\",\n      str_detect(institution, \"England\") ~ \"Bank of England\",\n      str_detect(institution, \"Finland\") ~ \"Bank of Finland\",\n      str_detect(institution, \"Suomen Pankki\") ~ \"Bank of Finland\",\n      str_detect(institution, \"(?i)Australia\") ~ \"Reserve Bank of Australia\",\n      str_detect(institution, \"Bahrain\") ~ \"Central Bank of Bahrain\",\n      str_detect(institution, \"Barbados\") ~ \"Central Bank of Barbados\",\n      str_detect(institution, \"Bahamas\") ~ \"Central Bank of The Bahamas\",\n      str_detect(institution, \"Belgium\") ~ \"National Bank of Belgium\",\n      str_detect(institution, \"(?i)Botswana\") ~ \"Bank of Botswana\",\n      str_detect(institution, \"Carribean\") ~ \"Eastern Caribbean Central Bank\",\n      str_detect(institution, \"(?i)Cambodia\") ~ \"National Bank of Cambodia\",\n      str_detect(institution, \"Chile\") ~ \"Central Bank of Chile\",\n      str_detect(institution, \"Columbia\") ~ \"Central Bank of Colombia\",\n      str_detect(institution, \"Croatia|Croation\") ~ \"Croatian National Bank\",\n      str_detect(institution, \"Curacao\") ~ \"Central Bank of Curacao and Sint Maarten\",\n      str_detect(institution, \"Cyprus\") ~ \"Central Bank of Cyprus\",\n      str_detect(institution, \"Czech\") ~ \"Czech National Bank\",\n      str_detect(institution, \"Ecuador\") ~ \"Central Bank of Ecuador\",\n      str_detect(institution, \"Eesti Pank\") ~ \"Bank of Estonia\",\n      str_detect(institution, \"(?i)Fiji\") ~ \"Reserve Bank of Fiji\",\n      str_detect(institution, \"Gambia\") ~ \"Central Bank of The Gambia\",\n      str_detect(institution, \"(?i)Ghana\") ~ \"Bank of Ghana\",\n      str_detect(institution, \"Greece\") ~ \"Bank of Greece\",\n      str_detect(institution, \"Guatemala\") ~ \"Bank of Guatemala\",\n      str_detect(institution, \"Hellenic\") ~ \"Bank of Greece\",\n      str_detect(institution, \"Iceland\") ~ \"Central Bank of Iceland\",\n      str_detect(institution, \"Kenya\") ~ \"Central Bank of Kenya\",\n      str_detect(institution, \"Kosovo\") ~ \"Central Bank of the Republic of Kosovo\",\n      str_detect(institution, \"Kuwait\") ~ \"Central Bank of Kuwait\",\n      str_detect(institution, \"Lativa\") ~ \"Bank of Latvia\",\n      str_detect(institution, \"Lithuania\") ~ \"Bank of Lithuania\",\n      str_detect(institution, \"Luxembourg\") ~ \"Central Bank of Luxembourg\",\n      str_detect(institution, \"Malawi\") ~ \"Reserve Bank of Malawi\",\n      str_detect(institution, \"Malta\") ~ \"Central Bank of Malta\",\n      str_detect(institution, \"Mozambique\") ~ \"Bank of Mozambique\",\n      str_detect(institution, \"Bank of Al\\\\b|Bank Al\\\\b|Al-Maghrib|Morocco\") ~ \"Bank Al-Maghrib (Central Bank of Morocco)\",\n      str_detect(institution, \"Nepal\") ~ \"Central Bank of Nepal (Nepal Rastra Bank)\",\n      str_detect(institution, \"New Zealand\") ~ \"Reserve Bank of New Zealand\",\n      str_detect(institution, \"Poland|Polski\") ~ \"Narodowy Bank Polski\",\n      str_detect(institution, \"Russia\") ~ \"Central Bank of the Russian Federation\",\n      str_detect(institution, \"Saudi\") ~ \"Saudi Central Bank\",\n      str_detect(institution, \"Seychelles\") ~ \"Central Bank of Seychelles\",\n      str_detect(institution, \"Singapore\") ~ \"Monetary Authority of Singapore\",\n      str_detect(institution, \"Slovakia|Slovenska\") ~ \"National Bank of Slovakia\",\n      str_detect(institution, \"Solomon Islands\") ~ \"Central Bank of Solomon Islands\",\n      str_detect(institution, \"South Africa\") ~ \"South African Reserve Bank\",\n      str_detect(institution, \"Ceylon\") ~ \"Central Bank of Sri Lanka\",\n      str_detect(institution, \"Swaziland|Eswatini\") ~ \"The Central Bank of Eswatini\",\n      str_detect(institution, \"Trinidad\") ~ \"Central Bank of Trinidad and Tobago\",\n      str_detect(institution, \"Tunisia\") ~ \"Central Bank of Tunisia\",\n      str_detect(institution, \"Turkiye|Turkey\") ~ \"Central Bank of the Republic of Turkiye\",\n      str_detect(institution, \"Emirates|UAE\") ~ \"Central Bank of the United Arab Emirates\",\n      str_detect(institution, \"Ukraine\") ~ \"National Bank of Ukraine\",\n      str_detect(institution, \"(?i)Zambia\") ~ \"Bank of Zambia\",\n      str_detect(institution, \"Bank for International Settlements|\\\\bBIS\\\\b\") ~ \"Bank for International Settlements\",\n      str_detect(institution, \"\\\\bBSC\\\\b\") ~ \"Banking Supervision Committee\",\n      str_detect(institution, \"Basel\") ~ \"Basel Committee\",\n      .default = institution\n    )\n  )"},{"path":"extracting-the-country-from-the-text.html","id":"get-country-from-institution-names","chapter":"2 Extracting the country from the text","heading":"2.4.4 Get country from institution names","text":"list banks, can associate speech country performing join.","code":"\nbank_list <- read_xlsx(here::here(\"inst\", \"data-misc\", \"bank_list.xlsx\"))\n\nspeeches <- speeches %>%\n  left_join(bank_list, by=\"institution\")"},{"path":"extracting-the-country-from-the-text.html","id":"saving-the-data","chapter":"2 Extracting the country from the text","heading":"2.5 Saving the data","text":"Writing data pin board:","code":"\nspeeches_board %>%\n  pin_qsave(\n    speeches,\n    \"speeches-with-country\",\n    title = \"speeches with institutions and countries\"\n  )"}]
